name: Build and Deploy Heldino.com

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Chemin standard pour le fichier de la clé SSH privée sur le runner
  SSH_KEY_FILE_PATH: ~/.ssh/deploy_key_github_action

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: production # Assurez-vous que cet environnement est configuré avec les secrets nécessaires
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ${{ env.SSH_KEY_FILE_PATH }}
          chmod 600 ${{ env.SSH_KEY_FILE_PATH }}
          # Utilisation directe de secrets.VPS_HOST pour ssh-keyscan
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          echo "SSH Setup complete. Key file at ${{ env.SSH_KEY_FILE_PATH }}"
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          # Correction ici: utilisation de ${{ secrets.VPS_USER }} et ${{ secrets.VPS_HOST }}
          ssh -v -o StrictHostKeyChecking=no \
            -i ${{ env.SSH_KEY_FILE_PATH }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo 'SSH connection successful to ${{ secrets.VPS_HOST }} as ${{ secrets.VPS_USER }}'"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install jq (if needed for other steps)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_NAME=${{ secrets.APP_NAME }}
            APP_ENV=${{ secrets.APP_ENV }}
            APP_DEBUG=${{ secrets.APP_DEBUG }}
            APP_URL=${{ secrets.APP_URL }}

      - name: Copy stack file to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "heldino-stack.yml"
          target: "~/stacks/"

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Deploying new image..."
            
            # Gérer les permissions docker.sock. Idéalement, configurer l'utilisateur VPS_USER
            # pour qu'il fasse partie du groupe docker sur le VPS.
            # Exemple : sudo usermod -aG docker ${{ secrets.VPS_USER }} (nécessite une reconnexion de session sur le VPS)
            # if [ -e /var/run/docker.sock ] && ! sudo -n true 2>/dev/null; then
            #   # Si on n'a pas sudo sans mot de passe, et que docker.sock existe, on essaie sans sudo.
            #   # Si on a sudo sans mdp, on peut envisager d'ajuster les permissions (mais c'est risqué).
            #   echo "Attempting Docker commands without sudo. Ensure ${{ secrets.VPS_USER }} has Docker permissions."
            # fi

            # Créer le répertoire stacks s'il n'existe pas
            mkdir -p ~/stacks
            cd ~/stacks

            echo "Logging in to GHCR on VPS if needed for pull..."
            # Si votre image est privée et que le VPS a besoin de s'authentifier pour pull,
            # assurez-vous que Docker sur le VPS est configuré pour GHCR.
            # L'option --with-registry-auth sur docker stack deploy aide pour cela
            # en utilisant les credentials du noeud qui lance la commande.

            echo "Removing existing stack: heldino_stack (if any)..."
            docker stack rm heldino_stack || echo "Stack heldino_stack not found or already removed."
            echo "Waiting for stack removal to complete..."
            sleep 30

            # La suppression des volumes est optionnelle et entraîne une perte de données.
            echo "Removing persistent volumes (optional)..."
            docker volume rm heldino_stack_heldino-app-data || echo "Volumes not found or already removed."
            sleep 10

            # Vérifier que le fichier de stack existe
            if [ ! -f "heldino-stack.yml" ]; then
              echo "Error: heldino-stack.yml file not found in ~/stacks directory"
              echo "Please ensure the stack file is deployed to the VPS"
              exit 1
            fi

            echo "Deploying stack: heldino_stack..."
            docker stack deploy -c heldino-stack.yml heldino_stack --with-registry-auth --prune --detach=true

            echo "Waiting for services to stabilize..."
            sleep 60 

            echo "Checking stack services..."
            docker stack ps heldino_stack


            echo "✅ Deployment script completed."