name: Build and Deploy Heldino.com

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Chemin standard pour le fichier de la clé SSH privée sur le runner
  SSH_KEY_FILE_PATH: ~/.ssh/deploy_key_github_action

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: production # Assurez-vous que cet environnement est configuré avec les secrets nécessaires
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ${{ env.SSH_KEY_FILE_PATH }}
          chmod 600 ${{ env.SSH_KEY_FILE_PATH }}
          # Utilisation directe de secrets.VPS_HOST pour ssh-keyscan
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          echo "SSH Setup complete. Key file at ${{ env.SSH_KEY_FILE_PATH }}"
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          # Correction ici: utilisation de ${{ secrets.VPS_USER }} et ${{ secrets.VPS_HOST }}
          ssh -v -o StrictHostKeyChecking=no \
            -i ${{ env.SSH_KEY_FILE_PATH }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo 'SSH connection successful to ${{ secrets.VPS_HOST }} as ${{ secrets.VPS_USER }}'"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install jq (if needed for other steps)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_NAME=${{ secrets.APP_NAME }}
            APP_ENV=${{ secrets.APP_ENV }}
            APP_DEBUG=${{ secrets.APP_DEBUG }}
            APP_URL=${{ secrets.APP_URL }}
      - name: Deploy to VPS
        run: |
          echo "Déploiement de la nouvelle image..."
          ssh -o StrictHostKeyChecking=no \
            -i ${{ env.SSH_KEY_FILE_PATH }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          sudo chmod 666 /var/run/docker.sock
          
          # Arrêter et supprimer les services utilisant le volume myapps_heldino-app-data
          docker service rm myapps_nginx-heldino
          sleep 10
          docker service rm myapps_php-heldino
          sleep 10
          docker service rm myapps_queue-worker-heldino
          sleep 15
          
          # Supprimer les conteneurs utilisant le volume heldino-app-data
          containers=$(docker ps -a --filter volume=heldino-app-data -q)
          if [ -n "$containers" ]; then
            docker rm -f $containers
          else
            echo "Aucun conteneur trouvé avec le volume 'heldino-app-data'."
          fi
          
          sleep 15
          
          # Forcer l'arrêt et la suppression des conteneurs restants
          remaining_containers=$(docker ps -a -q --filter "name=myapps_php-heldino")
          if [ -n "$remaining_containers" ]; then
            docker rm -f $remaining_containers
          fi
          
          # Supprimer le volume heldino-app-data
          docker volume rm myapps_heldino-app-data
          
          # Redéployer la stack entière avec la configuration corrigée
          docker stack deploy -c stack.yml myapps --with-registry-auth --detach=false
          
          # IMPORTANT : Forcer la mise à jour du proxy pour qu'il recharge sa configuration
          docker service update --force myapps_nginx-proxy
          
          echo "Le service HELDINO a été redéployé avec succès."
          EOF